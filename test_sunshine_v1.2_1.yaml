tosca_definitions_version: tosca_simple_profile_for_nfv_1_0
description: Relational database, simple
node_types:
  MyCompany.SunshineDB.1_0.1_0:
    derived_from: tosca.nodes.nfv.VNF
    properties:
      descriptor_id:
        type: string
        default: b1bb0ce7-ebca-4fa7-95ed-4840d70a1177
      provider: 
        type: string
        default: MyCompany
      product_name:
          type: string
          default: SunshineDB
      software_version: 
          type: string
          default: '1.0'
      descriptor_version: 
          type: string
          default: '1.0'
      flavour_id:
          type: string
          default: simple
      flavour_description:
          type: string
          default: "Description"
      vnfm_info:
          type: list
          entry_schema:
             type: string
          default: [MyCompany ]

    interfaces:
      Nfv:
        type: tosca.interfaces.nfv.vnf.lifecycle.Nfv
        instantiate:
          inputs:
            parameter_1:
               type: string
               required: false
               default: value_1
            parameter_2:
               type: string
               required: false
               default: value_2
        terminate:
          implementation: terminate.workbook.mistral.yaml
topology_template:
  inputs:
     product_name:
        type: string
        default: 'vpalo_alto'

  substitution_mappings:
    node_type: MyCompany.SunshineDB.1_0.1_0
    requirements:
       virtual_link: [ dbBackendIpv4,   virtual_link ] # IPv4 for SQL
    properties:
        software_version1: 'version_1.2'
        #product_name: [product_name]
        #software_version: [dbBackend,  descriptor_version]
        #virtual_memory: [ dbBackend, virtual_compute, virtual_memory]

    attributes:
       key1: value1
    interfaces:
        Nfv: # [stop, Standard]
           instantiate: /home/abhishek/install_vnfc.sh
    capabilities:
      deployment_flavour:
        properties:
          flavour_id: simple
          description: test
          #instantiation_levels:
          #  minimal:
          #    description: test
          #    vdu_levels:
          #      dbBackend:
          #        number_of_instances: 1
          default_instantiation_level_id: minimal
          vdu_profile: ['def']
         #   dbBackend:
         #     min_number_of_instances: 1
         #     max_number_of_instances: 1


  node_templates:
    dbBackend:
      type: tosca.nodes.nfv.VDU.Compute
      properties:
        name: "dbBackendCompute"
        description: "dbBackend description"
        configurable_properties:
          additional_vnfc_configurable_properties: {}
      capabilities:
        virtual_compute:
          properties:
            virtual_memory:
              virtual_mem_size: 8096 MB
            virtual_cpu:
              cpu_architecture: x86
              num_virtual_cpu: 2
              virtual_cpu_clock: 1800 MHz

      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: dbBackend.image  #the VM image of VDU1
          properties:
             name: Software_of_MariaDb"
             version: '1.0'
             checksum: 'avd'
             container_format: qcow2
             disk_format: bare
             min_disk: 2GB
             min_ram: 8096MB
             size: 2GB
             sw_image: "maria.db.image.v1.0.qcow2"
             operating_system: "Linux"
             supported_virtualization_environment:
              - KVM
      requirements:
        - virtual_storage: mariaDbStorage

#      interfaces:
#         Standard:
#           configure:
#             implementation: abc_configure.sh


    mariaDbStorage:
      type: tosca.nodes.nfv.Vdu.VirtualStorage
      properties:
        type_of_storage: VOLUME
        size_of_storage: 2 GB
        rdma_enabled: false        
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: dbBackend.image  #the VM image of VDU1
          properties:
             name: Software_of_MariaDb"
             version: '1.0'
             checksum: 'avd'
             container_format: qcow2
             disk_format: bare
             min_disk: 2GB
             min_ram: 8096MB
             size: 2GB
             sw_image: "maria.db.image.v1.0.qcow2"
             operating_system: "Linux"
             supported_virtualization_environment:
              - KVM


    dbBackendCp: 
      type: tosca.nodes.nfv.VduCp         
      properties:
        layer_protocol: ipv4
        role: leaf
        protocol_data: [] 
        trunk_mode: false  #Information about whether the CP instantiated from this CPD is in Trunk mode (802.1Q or other).
        #description: External connection point to access the DB on IPv4
      requirements:
        - virtual_binding: dbBackend


    dbBackendInternalCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocol: ipv4
        role: leaf
        trunk_mode: false
        protocol_data: []
        description: Internal connection point on an VL

      requirements:
        - virtual_binding: dbBackend
        - virtual_link: internalVl


    internalVl:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocol: ipv4
          flow_pattern: mesh

        #test_access: []

        description: "Internal VL description"
        vl_profile:
              max_bit_rate_requirements: 
                   root: 1000

              min_bit_rate_requirements:
                   root: 1000

    externalVl:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocol: ipv4
          flow_pattern: mesh
        description: "description for External VL"
        vl_profile:
              max_bit_rate_requirements:
                   root: 1000
              min_bit_rate_requirements:
                   root: 1000

                 

    dbBackendIpv4:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocol: ipv4
        trunk_mode: false
        protocol_data: []

      requirements:
        - virtual_link: externalVl
        - virtual_binding: dbBackend







